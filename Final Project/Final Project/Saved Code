Just a file for code that I don't want to get rid of but also don't want to have cluttering up the actual swift files.
- Format -
(File Name)
Description:
Code

(GameScene.swift)
Description: Stuff I used to get the gyroscope working, but have since switched to accelerometer
    // Gyroscope stuff -----------------------------------------------
    // Don't worry about it for right now.
    
    // Documentation states that we shouldn't be calling this method directly, but
    // we gonna keep using it till we find something better.
    /* Will "clip" through boundaries if turned fast enough because the movement in that instance
        is so great that the if statements won't catch that the player is out of bounds till
        the next frame. Need to fix that*/
    override func didSimulatePhysics() {
        
        /* Feels weird with this setup, need to figure out a different way the player doesn't clip*/
        
        /* Predicting speed and then just setting that to the boundaries!!!!!*/
        /* Need to implement this ^^^^ Is good!!!!*/
        
        /* Might need to bring back
        // Stops player at the edges of the screen
        let speed = CGFloat(5.0)
        // How far away the anchor point of the sprite is from the edges
        let space = CGFloat(30.0)
        // Right boundary. (Left is just 40)
        let right = self.size.width - space
        
        if player.position.x + yTurn * speed < space {
            player.position.x = space
        }
        else if player.position.x + yTurn * speed > right {
            player.position.x = right
        }
        else {
            player.position.x += yTurn * speed
        }
 */
        
        /*if player.position.x < 40 {
            if yTurn > 0 {
                player.position.x += yTurn * speed
            }
        }
        else if player.position.x > self.size.width - 40 {
            if yTurn < 0 {
                player.position.x += yTurn * speed
            }
        }
        else {
            player.position.x += yTurn * speed
        }*/
        
        /*
        player.position.x += xAcceleration * 10
        
        // This makes it wrap around. But no Don't want this. I Think
        if player.position.x < -20 {
            player.position = CGPoint(x: self.size.width, y: player.position.y)
        } else if player.position.x > self.size.width + 20 {
            player.position = CGPoint(x: -20, y: player.position.y)
        }
 */
    }
    
    //Source: https://developer.apple.com/documentation/coremotion/getting_raw_gyroscope_events
    func startGyro() {
        if motionManager.isGyroAvailable {
            self.motionManager.gyroUpdateInterval = 1.0 / 60.0
            self.motionManager.startGyroUpdates()
            
            testTimer = Timer(fire: Date(), interval: (1.0/60.0), repeats: true, block: {
                (timer) in
                // Get the gyro data.
                if let data  = self.motionManager.gyroData {
                    self.yTurn = CGFloat(data.rotationRate.y)
                    print(self.yTurn)
                }
            })
            RunLoop.current.add(testTimer, forMode: RunLoop.Mode.default)
        }
    }
    
    // Use whenever the game is paused or ended?
    func stopGyros() {
        if testTimer != nil {
            testTimer?.invalidate()
            testTimer = nil

            motionManager.stopGyroUpdates()
        }
    }
    

(GameScene.swift)
Description: Possible way of implementing projectile firing.

let finalY : CGFloat!
let finalX : CGFloat!
let currAngle = bullet.zRotation
if (0 <= currAngle && currAngle < .pi/2) {
    finalY = frame.maxY
    finalX = bullet.position.x - abs((finalY - bullet.position.y)*tan(currAngle))
} else if (-3*(.pi/2) <= currAngle && currAngle < -1*(.pi)) {
    finalY = frame.minY
    finalX = bullet.position.x - abs(bullet.position.y*tan(currAngle))
} else if (-1*(.pi) <= currAngle && currAngle < -1*(.pi)/2) {
    finalY = frame.minY
    finalX = bullet.position.x + abs(bullet.position.y * tan(currAngle))
} else {
    finalY = frame.maxY
    finalX = bullet.position.x + abs((finalY - bullet.position.y) * tan(currAngle))
}

let bulletDuration:TimeInterval = 0.5
var action = [SKAction]()
action.append(SKAction.move(to: CGPoint(x: finalX, y: finalY), duration: bulletDuration))
action.append(SKAction.removeFromParent())
bullet.run(SKAction.sequence(action))


(GameScene.swift)
Description: Bullet movement implementation using actions instead of force.
Link: https://www.raywenderlich.com/71-spritekit-tutorial-for-beginners


(GameScene.swift)
Description: Just the firebullet() function before I moved
the bullet implementation to a different file.

func fireBullet(touchLocation: CGPoint) {
    let bullet = SKSpriteNode(imageNamed: "BallBullet")
    bullet.name = "projectile"
    bullet.size = CGSize(width: 20, height: 20)
    bullet.position = CGPoint(x: player.position.x, y: player.position.y + player.size.height/2)
    bullet.physicsBody = SKPhysicsBody(circleOfRadius: max(bullet.size.width, bullet.size.height))
    
    bullet.physicsBody?.affectedByGravity = false
    bullet.physicsBody?.isDynamic = true
    bullet.physicsBody?.usesPreciseCollisionDetection = true // Cause its moving pretty fast.
    bullet.physicsBody?.allowsRotation = false
    
    bullet.physicsBody?.restitution = 1.0
    bullet.physicsBody?.linearDamping = 0
    bullet.physicsBody?.friction = 0
    //bullet.physicsBody?.mass = CGFloat(3.0)
    
    bullet.physicsBody?.categoryBitMask = PhysicsCategory.projectile
    bullet.physicsBody?.collisionBitMask = PhysicsCategory.asteroid | PhysicsCategory.border
    bullet.physicsBody?.contactTestBitMask = PhysicsCategory.asteroid | PhysicsCategory.border
    
    let offset = touchLocation - bullet.position
    
    if offset.y < 0 {return}
    
    addChild(bullet)
    
    let direction  = offset.normalized()
    
    let shootAmount = direction * 2000
    
    let realDest = shootAmount + bullet.position
    let realVector = CGVector(dx: realDest.x, dy: realDest.y)
    
    bullet.physicsBody?.applyForce(realVector)
}


(Asteroid.swift)
Description: Action based asteroid movement
//Animation

/*
let path = UIBezierPath()
path.move(to: .zero)
path.addLine(to: CGPoint(x: 0, y: -10000))

let movement = SKAction.follow(path.cgPath, asOffset: true, orientToPath: true, speed: velocity)
let sequence = SKAction.sequence([movement, .removeFromParent()])
run(sequence)
*/

(GameOverScene.swift)
Description: for returning back to the game scene from the game over scene

// Need to figure out how to get back to the main menu from here
/*run(SKAction.sequence([
  SKAction.wait(forDuration: 3.0),
  SKAction.run() { [weak self] in
    
    guard let `self` = self else { return }
    let reveal = SKTransition.flipHorizontal(withDuration: 0.5)
    let scene = GameScene(size: size)
    self.view?.presentScene(scene, transition:reveal)
  }
  ]))*/


 (GamScene.swift)
 
